package com.zhy.alipayhk;import cn.hutool.core.map.MapUtil;import cn.hutool.core.net.URLEncodeUtil;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.alipay.global.api.tools.SignatureTool;import com.google.common.base.Splitter;import com.google.common.collect.Lists;import com.zhy.alipayhk.domain.AliPayHKQueryTemplateRespone;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.apache.commons.lang3.time.DateUtils;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpEntity;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpMethod;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.util.CollectionUtils;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.client.RestTemplate;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.time.ZonedDateTime;import java.util.ArrayList;import java.util.Arrays;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Objects;import java.util.TimeZone;import java.util.stream.Collectors;import static java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME;/** * @author zhouhongyin * @since 2024/11/27 20:08 */@Slf4j@RestController@RequestMapping("alipayhk")public class AlipayHKController {    @Autowired    private RestTemplate restTemplate;    String signatureCipher(String httpMethod, String uri, String clientId, String requestTime, String httpBody) {        try {            String sign = SignatureTool.sign(httpMethod, uri, clientId, requestTime, httpBody, AliPayHkSignatureUtils.PRIVATE_KEY);            return String.format(AliPayHkSignatureUtils.SIGN_TEMPLATE_HEADER, sign);        } catch (Exception e) {            throw new RuntimeException(e);        }        //String encrypting = AliPayHkSignatureUtils.encrypting(httpMethod,        //        uri,        //        clientId,        //        requestTime,        //        httpBody);        //        //System.out.println(encrypting);        //return encrypting;    }    ;    HttpHeaders httpHeaders(String clientId, String requestTime, String signatureText) {        HttpHeaders requestHeaders = new HttpHeaders();        requestHeaders.add(AliPayHKConst.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);        requestHeaders.add(AliPayHKConst.CLIENT_ID_REQUEST_SIDE, clientId);        requestHeaders.add(AliPayHKConst.REQUEST_TIME_REQUEST_SIDE, requestTime);        requestHeaders.add(AliPayHKConst.SIGNATURE, signatureText);        return requestHeaders;    }    Map<String, String> httpHeaderMap(String clientId, String requestTime, String signatureText) {        Map<String, String> requestHeaders = new HashMap<>();        requestHeaders.put(AliPayHKConst.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);        requestHeaders.put(AliPayHKConst.CLIENT_ID_REQUEST_SIDE, clientId);        requestHeaders.put(AliPayHKConst.REQUEST_TIME_REQUEST_SIDE, requestTime);        requestHeaders.put(AliPayHKConst.SIGNATURE, signatureText);        return requestHeaders;    }    String generateSignature(String clientId, String uri, String requestBody, String requestTime) {        String signatureCipher = signatureCipher(HttpMethod.POST.name(), uri, clientId, requestTime, requestBody);        if (StringUtils.isBlank(signatureCipher)) {            log.error("Signature generation failed for requestBody: {}", requestBody); // 补充日志            throw new RuntimeException("translateFunction().apply(I18nKey.EXCEPTION_PARAM_SIGNED_ERROR)");        }        return signatureCipher;    }    Resp<String> gotRemoteResp(String clientId, String uri, String requestBody) {        String requestTime = ZonedDateTime.now().format(ISO_OFFSET_DATE_TIME); // 统一生成时间戳        try {            String signatureCipher = generateSignature(clientId, uri, requestBody, requestTime);            ResponseEntity<String> response = sendHttpRequest(clientId, uri, requestBody, signatureCipher, requestTime);            System.out.println(response.getBody());            validateResponse(response, uri);            return remoteRespBody(response.getBody());        } catch (Exception e) {            log.error("Error processing Alipay HK request", e);            return Resp.fail("exception()");        }    }    void validateResponse(ResponseEntity<String> response, String uri) {        HttpHeaders responseHeaders = response.getHeaders();        log.info("headers: {}", JSON.toJSONString(responseHeaders));        log.info("tracerId: " + responseHeaders.get("tracerId"));        String signature = extractSignature(responseHeaders);        String clientId = extractHeaderValue(responseHeaders, AliPayHKConst.CLIENT_ID_RESPONSE_SIDE);        String requestTime = extractHeaderValue(responseHeaders, AliPayHKConst.RESPONSE_TIME_RESPONSE_SIDE);        boolean verify = AliPayHkSignatureUtils.decryptedAndVerified(                signature, HttpMethod.POST.name(), uri, clientId, requestTime, response.getBody());        if (!verify) {            log.error("Signature verification failed for response body: {}", response.getBody()); // 补充日志            throw new RuntimeException("illegal()");        }    }    Resp<String> remoteRespBody(String responseBody) {        if (StringUtils.isBlank(responseBody)) { // 补充对 responseBody 为空的检查            log.error("Response body is empty");            return Resp.fail("exception()");        }        JSONObject jsonObject = JSON.parseObject(responseBody);        if (Objects.isNull(jsonObject) || !jsonObject.containsKey("result")                || Objects.isNull(jsonObject.getJSONObject("result"))                || !"S".equalsIgnoreCase(jsonObject.getJSONObject("result").getString("resultStatus"))) {            log.error("Invalid response: {}", responseBody);            return Resp.fail("exception()");        }        return Resp.success(responseBody);    }    String extractSignature(HttpHeaders headers) {        List<String> signatureOriginList = headers.get("Signature");        if (CollectionUtils.isEmpty(signatureOriginList)) {            log.error("Signature header is missing or empty"); // 补充日志            throw new IllegalArgumentException("Signature header is empty");        }        Map<String, String> respHeaderMap = Arrays.stream(signatureOriginList.get(0).split(","))                .map(pair -> pair.split("="))                .filter(keyValue -> keyValue.length == 2)                .collect(Collectors.toMap(keyValue -> keyValue[0], keyValue -> keyValue[1]));        String signature = respHeaderMap.get("signature");        if (StringUtils.isBlank(signature)) {            log.error("Extracted signature is empty"); // 补充日志            throw new IllegalArgumentException("Signature is empty");        }        return signature;    }    String extractHeaderValue(HttpHeaders headers, String headerName) {        List<String> headerValues = headers.get(headerName);        if (CollectionUtils.isEmpty(headerValues)) {            log.error("{} header is missing or empty", headerName); // 补充日志            throw new IllegalArgumentException(headerName + " is empty");        }        return headerValues.get(0);    }    String getHost(String uri) {        //String host = ConfigManager.isDevelop() ? AliPayHKConst.DOMAIN_PRE + uri : AliPayHKConst.DOMAIN_PROD + uri;        String host = AliPayHKConst.DOMAIN_PRE + uri;        log.info("Host generated: {}", host); // 补充日志        return host;    }    ResponseEntity<String> sendHttpRequest(String clientId, String uri, String requestBody, String signatureCipher, String requestTime) {        HttpEntity<String> entity = new HttpEntity<>(requestBody, httpHeaders(clientId, requestTime, signatureCipher));        String host = getHost(uri);        RestTemplate restTemplate = new RestTemplate();        ResponseEntity<String> response = restTemplate.postForEntity(host, entity, String.class);        if (!HttpStatus.OK.equals(response.getStatusCode())) {            log.error("Failed to invoke Alipay HK server. Status: {}, Response: {}", response.getStatusCode(), response.getBody()); // 补充日志            throw new RuntimeException("translateFunction().apply(I18nKey.EXCEPTION_REMOTE_REQUEST_ERROR)");        }        return response;    }    @Test    public void createTemplate() {        Resp<String> signatureAndVerifyResp = gotRemoteResp(AliPayHKConst.CLIENT_ID,                AliPayHKConst.CREATE_TEMPLATE_URL,                createTemplateJson);        System.out.println(signatureAndVerifyResp);    }    @Test    public void updateTemplate() {        Resp<String> signatureAndVerifyResp = gotRemoteResp(AliPayHKConst.CLIENT_ID,                AliPayHKConst.UPDATE_TEMPLATE_URL,                updateTemplateJson);        System.out.println(signatureAndVerifyResp);    }    @Test    public void switchStatus() {        Resp<String> signatureAndVerifyResp = gotRemoteResp(AliPayHKConst.CLIENT_ID,                AliPayHKConst.SWITCH_STATUS_URL,                switchStatusJson);        System.out.println(signatureAndVerifyResp);    }    @Test    public void queryTemplate() {        Resp<String> signatureAndVerifyResp = gotRemoteResp(AliPayHKConst.CLIENT_ID,                AliPayHKConst.QUERY_TEMPLATE_URL,                queryTemplateJson);        System.out.println(signatureAndVerifyResp);        AliPayHKQueryTemplateRespone aliPayHKQueryTemplateRespone = JSON.parseObject(signatureAndVerifyResp.data, AliPayHKQueryTemplateRespone.class);        System.out.println(aliPayHKQueryTemplateRespone);    }    @Test    public void createTicket() {        Resp<String> signatureAndVerifyResp = gotRemoteResp(AliPayHKConst.CLIENT_ID,                AliPayHKConst.CREATE_TICKET_URL,                createTicketJson);        System.out.println(signatureAndVerifyResp);    }    @Test    public void updateTicket() {        long now = new Date().getTime();        AliPayHKUpdateTicketRequest aliPayHKUpdateTicketRequest = JSON.parseObject(updateTicketJson1, AliPayHKUpdateTicketRequest.class);        aliPayHKUpdateTicketRequest.setPassId("2024121119027102160254809674364");        aliPayHKUpdateTicketRequest.setStatus("UPDATE");        aliPayHKUpdateTicketRequest.setUpdateDetailType("UPDATE_PASS");        aliPayHKUpdateTicketRequest.setBizDate(now);        JSONObject dataInfo = (JSONObject) aliPayHKUpdateTicketRequest.getDataInfo();        dataInfo.put("$startTime_zh_HK$", now);        dataInfo.put("$startTime_en_US$", now);        aliPayHKUpdateTicketRequest.setDataInfo(dataInfo);        String jsonString = JSON.toJSONString(aliPayHKUpdateTicketRequest);        System.out.println(jsonString);        Resp<String> signatureAndVerifyResp = gotRemoteResp(AliPayHKConst.CLIENT_ID,                AliPayHKConst.UPDATE_TICKET_URL,                jsonString);        System.out.println(signatureAndVerifyResp);    }    @Test    public void updateTicketStatus() {        Resp<String> signatureAndVerifyResp = gotRemoteResp(AliPayHKConst.CLIENT_ID,                AliPayHKConst.UPDATE_TICKET_URL,                updateTicketJson);        System.out.println(signatureAndVerifyResp);    }    private String updateTicketJson = "{\n" +            "    \"merchantId\": \"2160120155192269\",\n" +            "    \"userId\": \"2160220147636253\",\n" +            "    \"passId\": \"2024121119027102160253009674363\",\n" +            "    \"status\": \"USED\"\n" +            "}";    private String updateTicketJson1 = "{\n" +            "    \"merchantId\": \"2160120155192269\",\n" +            "    \"userId\": \"2160220147636253\",\n" +            "    \"templateCode\": \"22024121000135606000000012735931\",\n" +            "    \"bizSerialId\": \"11009211-1\",\n" +            "    \"bizSerialType\": \"OUT_PLAT_FORM\",\n" +            "    \"startDate\": 1735603200000,\n" +            "    \"endDate\": 1738058400000,\n" +            "    \"bizCreate\": 1733907407766,\n" +            "    \"type\": \"TICKET\",\n" +            "    \"product\": \"PASS\",\n" +            "    \"codeInfo\": {\n" +            "        \"$codemsg$\": \"1\",\n" +            "        \"$codevalue$\": \"1\"\n" +            "    },\n" +            "    \"dataInfo\": {\n" +            "        \"$ticketName_zh_HK$\": \"HKD680\",\n" +            "        \"$ticketName_en_US$\": \"1 Physical ticket\",\n" +            "        \"$address_zh_HK$\": \"香港特別行政區油尖旺區尖沙咀梳士巴利道10號\",\n" +            "        \"$address_en_US$\": \"10 Salisbury Road, Tsim Sha Tsui, Yau Tsim Mong District, Hong Kong Special Administrative Region\",\n" +            "        \"$availableTimes_zh_HK$\": 1,\n" +            "        \"$availableTimes_en_US$\": 1,\n" +            "        \"$price_zh_HK$\": null,\n" +            "        \"$price_en_US$\": null,\n" +            "        \"$startTime_zh_HK$\": 1735603200000,\n" +            "        \"$startTime_en_US$\": 1735603200000,\n" +            "        \"$endTime_zh_HK$\": 1738058400000,\n" +            "        \"$endTime_en_US$\": 1738058400000,\n" +            "        \"$platformName_zh_HK$\": \"Ticketebay\",\n" +            "        \"$platformName_en_US$\": \"Ticketebay\",\n" +            "        \"$platformLogo_zh_HK$\": null,\n" +            "        \"$platformLogo_en_US$\": null\n" +            "    },\n" +            "    \"extInfo\": {\n" +            "        \"billId\": null,\n" +            "        \"merchantBillId\": \"11009211\",\n" +            "        \"merchantBillDetail\": \"alipayhk://platformapi/startapp?appId=2102020211542667&page=pages/order/detail/index&query=id%3D11009211\"\n" +            "    },\n" +            "    \"publishScene\": null\n" +            "}";    private String createTicketJson = "{\n" +            "    \"merchantId\": \"2160120155192269\",\n" +            "    \"userId\": \"2160220148759854\",\n" +            "    \"templateCode\": \"22024121000135606000000012735931\",\n" +            "    \"bizSerialId\": \"000002-1\",\n" +            "    \"bizSerialType\": \"OUT_PLAT_FORM\",\n" +            "    \"startDate\": 1735574400000,\n" +            "    \"endDate\": 1737993600000,\n" +            "    \"bizCreate\": 1733889473360,\n" +            "    \"type\": \"TICKET\",\n" +            "    \"product\": \"PASS\",\n" +            "    \"codeInfo\": {\n" +            "        \"$codemsg$\": \"1\",\n" +            "        \"$codevalue$\": \"1\"\n" +            "    },\n" +            "    \"dataInfo\": {\n" +            "        \"$ticketName_zh_HK$\": \"HKD680\",\n" +            "        \"$ticketName_en_US$\": \"1 Physical ticket\",\n" +            "        \"$address_zh_HK$\": \"香港特別行政區油尖旺區尖沙咀梳士巴利道10號\",\n" +            "        \"$address_en_US$\": \"10 Salisbury Road, Tsim Sha Tsui, Yau Tsim Mong District, Hong Kong Special Administrative Region\",\n" +            "        \"$availableTimes_zh_HK$\": 3,\n" +            "        \"$availableTimes_en_US$\": 3,\n" +            "        \"$price_zh_HK$\": null,\n" +            "        \"$price_en_US$\": null,\n" +            "        \"$startTime_zh_HK$\": 1735574400000,\n" +            "        \"$startTime_en_US$\": 1735574400000,\n" +            "        \"$endTime_zh_HK$\": 1737993600000,\n" +            "        \"$endTime_en_US$\": 1737993600000,\n" +            "        \"$platformName_zh_HK$\": \"Ticketebay\",\n" +            "        \"$platformName_en_US$\": \"Ticketebay\",\n" +            "        \"$platformLogo_zh_HK$\": null,\n" +            "        \"$platformLogo_en_US$\": null\n" +            "    },\n" +            "    \"extInfo\": {\n" +            "        \"billId\": null,\n" +            "        \"merchantBillId\": \"11009017\",\n" +            "        \"merchantBillDetail\": \"alipayhk://platformapi/startapp?appId=2102020211542667&page=pages/order/detail/index&query=id%3D11009017\"\n" +            "    },\n" +            "    \"publishScene\": null\n" +            "}";    private String queryTemplateJson = "{\n" +            "  \"merchantId\": \"2160120155192269\",\n" +            "  \"templateCode\": \"22024121200135606000000012836086\"\n" +            "}";    private String updateTemplateJson = "{\n" +            "    \"merchantId\": \"2160120155192269\",\n" +            "    \"templateCode\": \"22024121200135606000000012836086\",\n" +            "    \"startDate\": 1733999896000,\n" +            "    \"endDate\": 1734572285584,\n" +            "    \"imageUrl\": \"https://img.ticketebay.com/poster/fe22071073422e576b92d2592b6330d1c0a58cb8.jpg\",\n" +            "    \"button\": {\n" +            "        \"browserOpen\": null,\n" +            "        \"btnType\": \"none\",\n" +            "        \"btnUrl\": null,\n" +            "        \"urlType\": \"CODE_PAY_BTN\"\n" +            "    },\n" +            "    \"localeInfo\": {\n" +            "        \"zh_HK\": {\n" +            "            \"name\": \"【澳門】Charlie Puth “Something New” Live Tour in Macao 查理·普斯 斷眉 巡迴演唱會澳門站\",\n" +            "            \"subName\": \"【澳門】Charlie Puth “Something New” Live Tour in Macao 查理·普斯 斷眉 巡迴演唱會澳門站\",\n" +            "            \"description\": \"實體票：<br>- 快遞配送：需支付郵費，具體金額以訂單頁展示爲準，順豐發貨。<br>- 現場取票：工作人員將在演出開場前1小時至現場派票。工作人員聯繫方式、具體取票地址將在演出當天以短信或郵箱通知爲準。<br>電子票：<br>- 實名電子票：觀演人現場觀演，須攜帶本人證件（需與購票時提供的證件一致）通過安檢時，閘機驗證人臉、證件及購票信息一致方可入場。<br>- 普通電子票：普通電子票指無須使用身份證等證件登記的電子票，將以二維碼作為入場憑證。<br>- 電子票兌換紙票：對於需兌換成紙質票的電子票，則需要您在限定時間內將電子票兌換成紙質票。<br>Ticketebay辦公室地址: 香港九龍彌敦道792-804號協成行太子中心703室（週一至週日（包括公衆假期） 上午十時至晚上六時半）<br>聯繫方式：+852 35904998 | support@ticketebay.com\",\n" +            "            \"brandName\": \"Ticketebay\"\n" +            "        },\n" +            "        \"en_US\": {\n" +            "            \"name\": \"Charlie Puth's \\\"Something New\\\" Live Tour in Macau\",\n" +            "            \"subName\": \"Charlie Puth's \\\"Something New\\\" Live Tour in Macau\",\n" +            "            \"description\": \"Physical tickets:<br>Express delivery: postage is required, the specific amount is subject to the display on the order page, and SF Express will ship the goods.<br>On site ticket collection: The staff will arrive at the venue one hour before the start of the performance to distribute tickets. The contact information and specific ticketing address of the staff will be notified via SMS or email on the day of the performance.<br>E-Tickets:<br>Real-Name E-Tickets: Attendees must bring their personal identification (which must match the ID provided during ticket purchase) for entry. At the venue, identity verification will be conducted at security checkpoints through facial recognition, ID, and ticket information. Only when all these match can entry be granted.<br>Standard E-Tickets: These tickets do not require identity registration, such as with an ID card. Entry will be granted upon presenting a QR code as the proof of purchase.<br>E-Ticket to Paper Ticket Exchange: For electronic tickets requiring conversion into physical tickets, attendees must exchange them for paper tickets within the designated time frame.<br>Address of Ticketebay Office : Room 703, Hip Shing Hong Prince Center, 792-804 Nathan Road, Kowloon, Hong Kong (Monday to Sunday, including public holidays, from 10:00 AM to 6:30 PM)<br>Contact: +852 35904998 | support@ticketebay.com\",\n" +            "            \"brandName\": \"Ticketebay\"\n" +            "        }\n" +            "    },\n" +            "    \"merchantLogo\": \"https://assets.ticketebay.com/public/icons/ticketebay-logo-all.jpg\",\n" +            "    \"currentAmountCent\": 1,\n" +            "    \"originalAmountCent\": 1,\n" +            "    \"currencyCode\": \"HKD\",\n" +            "    \"orderPageLink\": \"alipayhk://platformapi/startapp?appId=2102020211542667&page=pages/activity/detail/index&query=id%3D211802\",\n" +            "    \"detailLink\": \"alipayhk://platformapi/startapp?appId=2102020211542667&page=pages/activity/detail/index&query=id%3D211802\",\n" +            "    \"categories\": [\n" +            "        \"0002000100020009\"\n" +            "    ],\n" +            "    \"bizMids\": null,\n" +            "    \"exposure\": \"hidden\",\n" +            "    \"passExtInfo\": {\n" +            "        \"tags\": [\n" +            "            \"HOT\",\n" +            "            \"HOT\"\n" +            "        ],\n" +            "        \"country\": \"156\",\n" +            "        \"province\": \"820000\",\n" +            "        \"city\": \"820000\",\n" +            "        \"district\": null,\n" +            "        \"businessArea\": null,\n" +            "        \"soldNum\": 0,\n" +            "        \"userNum\": 0,\n" +            "        \"rating\": \"5\",\n" +            "        \"rateNum\": 0\n" +            "    }\n" +            "}";    private String switchStatusJson = "{\n" +            "    \"merchantId\": \"2160120155192269\",\n" +            "    \"templateCode\": \"22024121200135606000000012836086\",\n" +            "    \"status\": \"valid\"\n" +            "}";    private String createTemplateJson = "{\n" +            "    \"requestId\": \"12300007\",\n" +            "    \"merchantId\": \"2160120155192269\",\n" +            "    \"startDate\": 1734062306553,\n" +            "    \"endDate\": 1765354207008,\n" +            "    \"type\": \"TICKET\",\n" +            "    \"product\": \"PASS\",\n" +            "    \"codeType\": \"none\",\n" +            "    \"codeStandard\": \"\",\n" +            "    \"imageUrl\": \"https://imgbeta.ticketebay.com/poster/d9c574e21c1b22fd5207362641cd2f2a32be35f3.jpg\",\n" +            "    \"button\": {\n" +            "        \"browserOpen\": null,\n" +            "        \"btnType\": \"none\",\n" +            "        \"btnUrl\": null,\n" +            "        \"urlType\": \"CODE_PAY_BTN\"\n" +            "    },\n" +            "    \"localeInfo\": {\n" +            "        \"zh_HK\": {\n" +            "            \"name\": \"AlpayHK 小程序驗收 1210\",\n" +            "            \"subName\": \"AlpayHK 小程序驗收 1210\",\n" +            "            \"description\": \"演出時長：120<br>限購說明：每單限購6張<br>座位類型：請按門票對應座位，有序對號入座<br>兒童入場提示：1.2公尺以上憑票入場，1.2公尺以下謝絕入場<br>禁止攜帶物品：食品、飲料、相機、行動電源、打火機等<br>實體票：本項目支持憑實體票入場，支持以下取票方式：<br>- 快遞配送：需支付郵費，具體金額以訂單頁展示爲準，順豐發貨。<br>- 現場取票：工作人員將在演出開場前1小時至現場派票。工作人員聯繫方式、具體取票地址將在演出當天以短信或郵箱通知爲準。<br><br>電子票：實名電子票：觀演人現場觀演，須攜帶本人證件（需與購票時提供的證件一致）通過安檢時，閘機驗證人臉、證件及購票信息一致方可入場。<br>普通電子票：普通電子票指無須使用身份證等證件登記的電子票，將以二維碼作為入場憑證。<br>電子票兌換紙票：對於需兌換成紙質票的電子票，則需要您在限定時間內將電子票兌換成紙質票。\",\n" +            "            \"brandName\": \"Ticketebay\"\n" +            "        },\n" +            "        \"en_US\": {\n" +            "            \"name\": \"AlpayHK Mini Program Acceptance 1210\",\n" +            "            \"subName\": \"AlpayHK Mini Program Acceptance 1210\",\n" +            "            \"description\": \"Purchase Restriction：Each order is limited to 6 pieces<br>Seat Type：Please take your seats according to the corresponding tickets in an orderly manner<br>Children Admission Notice：11111<br>Paper Ticket：This project supports entry with physical tickets and supports the following ticket collection methods:<br>- Express delivery: postage is required, the specific amount is subject to the display on the order page, and SF Express will ship the goods.<br>- On site ticket collection: The staff will arrive at the venue one hour before the start of the performance to distribute tickets. The contact information and specific ticketing address of the staff will be notified via SMS or email on the day of the performance.<br><br>E-Ticket：Real-Name E-Tickets: Attendees must bring their personal identification (which must match the ID provided during ticket purchase) for entry. At the venue, identity verification will be conducted at security checkpoints through facial recognition, ID, and ticket information. Only when all these match can entry be granted.<br>Standard E-Tickets: These tickets do not require identity registration, such as with an ID card. Entry will be granted upon presenting a QR code as the proof of purchase.<br>E-Ticket to Paper Ticket Exchange: For electronic tickets requiring conversion into physical tickets, attendees must exchange them for paper tickets within the designated time frame.\",\n" +            "            \"brandName\": \"Ticketebay\"\n" +            "        }\n" +            "    },\n" +            "    \"merchantLogo\": \"https://assets.ticketebay.com/public/icons/ticketebay-logo-all.jpg\",\n" +            "    \"currentAmountCent\": 100,\n" +            "    \"originalAmountCent\": 100,\n" +            "    \"currencyCode\": \"HKD\",\n" +            "    \"stock\": null,\n" +            "    \"orderPageLink\": \"alipayhk://platformapi/startapp?appId=2102020211542667&page=pages/activity/detail/index&query=id%3D211287\",\n" +            "    \"detailLink\": \"alipayhk://platformapi/startapp?appId=2102020211542667&page=pages/activity/detail/index&query=id%3D211287\",\n" +            "    \"categories\": [\n" +            "        \"0002000100020002\"\n" +            "    ],\n" +            "    \"bizMids\": null,\n" +            "    \"exposure\": \"exposed\",\n" +            "    \"passExtInfo\": {\n" +            "        \"tags\": [\n" +            "            \"HOT\"\n" +            "        ],\n" +            "        \"country\": \"156\",\n" +            "        \"province\": \"810000\",\n" +            "        \"soldNum\": 0,\n" +            "        \"userNum\": 0,\n" +            "        \"rating\": 4.5,\n" +            "        \"rateNum\": \"0\"\n" +            "    }\n" +            "}";    @Test    public void test1() {        // 创建一个 Date 对象，这里假设你已经有了一个 Date 对象        Date date = DateUtils.addMinutes(new Date(1733128200000L), 15); // 示例中使用当前时间，你可以替换为你自己的 Date 对象        // 创建 SimpleDateFormat 对象，并设置格式        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");        //// 设置时区为 +08:30        //sdf.setTimeZone(TimeZone.getDefault());        // 格式化日期        String formattedDate = sdf.format(date);        // 输出结果        System.out.println(formattedDate);    }    @Test    public void test() {        System.out.println(new Date(1733799628000L).before(Calendar.getInstance().getTime()));        List<Integer> list = new ArrayList<>();        list.add(1);        list.add(3);        list.add(2);        list.sort((a1, a2) -> {            return -Integer.compare(a1, a2);        });        System.out.println(list);        System.out.println(String.format("%s-%s", 1, 2));        System.out.println(Splitter.on(",").splitToList("1"));    }    private static final Map<Integer, List<String>> activityCategoryIdMap = MapUtil.<Integer, List<String>>builder()            .put(1, Lists.newArrayList("0002000100020002"))            .put(2, Lists.newArrayList("0002000100020009"))            .put(3, Lists.newArrayList("0002000100020009"))            .put(4, Lists.newArrayList("0002000100020006"))            .put(5, Lists.newArrayList("0002000100029999"))            .put(6, Lists.newArrayList("0002000100020007"))            .put(7, Lists.newArrayList("0002000100020010", "0002000100020011"))            .put(8, Lists.newArrayList("000200010003"))            .put(9, Lists.newArrayList("000200020002"))            .put(10, Lists.newArrayList("000200020002", "000200010002")).build();    public static void main(String[] args) {        BigDecimal low = BigDecimal.valueOf(1).multiply(BigDecimal.valueOf(100));        System.out.println(low.toString());        System.out.println(activityCategoryIdMap.getOrDefault(1, Lists.newArrayList("000200010002")));    }}